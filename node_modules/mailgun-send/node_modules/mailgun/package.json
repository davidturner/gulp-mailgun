{
  "name": "mailgun",
  "version": "0.4.2",
  "description": "Mailgun for Node.js",
  "author": {
    "name": "shz"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:shz/node-mailgun.git"
  },
  "main": "./mailgun",
  "homepage": "http://github.com/shz/mailgun",
  "engine": "node",
  "readme": "# node-mailgun\n\nThis library provides simple access to Mailgun's API for node.js applications.\nIt's MIT licensed, and being used in production over at [Hipsell](http://hipsell.com).\n\n## Installation\n\n    npm install mailgun\n\nOr you can just throw `mailgun.js` into your application.  There are\nno dependendies outside of node's standard library.\n\n**Note:** `master` on Github is going to be untested/unstable at times,\n          as this is a small enough library that I don't want to bother\n          with a more complicated repo structure.  As such, you should\n          really only rely on the version of `mailgun` in `npm`, as\n          I'll only ever push stable and tested code there.\n\n## Usage\n\nAt the time of writing, Mailgun's documentation is actually incorrect in places,\nwhich is unfortunate.  As such, I'm going to re-document everything in this README\naccording to the actual way it's implemented in `node-mailgun`, which itself\nis based off the implementation from Mailgun's github account, and not the API\ndocs on the site.\n\n## Initialization\n\nAccess to the API is done through a Mailgun object.  It's instantiated\nlike so:\n\n    var mg = new Mailgun('api-key');\n\n## Sending Email\n\nMailgun's API provides two methods for sending email: raw, and text.  Both\nof them are exposed here.\n\n### sendText\n\nSends a simple plain-text email.  This also allows for slightly easier\nsending of Mailgun options, since with `sendRaw` you have to set them\nin the MIME body yourself.\n\n`sendText(sender, recipients, subject, text, [servername=''], [options={}], [callback(err)])`\n\n * `sender` - Sender of the message; this should be a full email address\n              (e.g. `example@example.com`).\n * `recipients` - A string (`example@example.com`) or array of strings (`['a@example.com', 'b@example.com']`)\n                  of recipients; these can be email addresses *or* HTTP URLs.\n * `subject` - Message subject\n * `text` - Message body text\n * `servername` - The name of the Mailgun server.  If you only have\n                  one server on your Mailgun account, this can be omitted.\n                  Otherwise, it should be set to the server you want to\n                  send from.\n * `options` - Optional parameters.  See Mailgun's API docs for details on\n               these.  At the time of writing, the only supported value is\n               `headers`, which should be a hash of additional MIME headers\n               you want to send.\n * `callback` - Callback to be fired when the email is done being sent.  This\n                should take a single parameter, `err`, that will be set to\n                the status code of the API HTTP response code  if the email\n                failed to send; on success, `err` will be `undefined`.\n\n#### Example\n\n    sendText('sender@example.com',\n             ['recipient1@example.com', 'http://example.com/recipient2'],\n             'Behold the wonderous power of email!',\n             {'X-Campaign-Id': 'something'},\n             function(err) { err && console.log(err) });\n\n### sendRaw\n\nSends a raw MIME message.  *Don't* just use this with text; instead,\nyou should either build a MIME message manually or by using some MIME\nlibrary (I've not been able to find one for node.js -- if you're aware\nof one let me know and I'll link it here).\n\n`sendRaw(sender, recipients, rawBody, [servername], [callback(err)])`\n\n * `sender` - Sender of the message; this should be a full email address\n              (e.g. `example@example.com`)\n * `recipients` - A string (`example@example.com`) or array of strings (`['a@example.com', 'b@example.com']`)\n                  of recipients; these can be email addresses *or* HTTP URLs.\n * `rawBody` - MIME message to send\n * `servername` - The name of the Mailgun server.  If you only have\n                  one server on your Mailgun account, this can be omitted.\n                  Otherwise, it should be set to the server you want to\n                  send from.\n * `callback` - Callback to be fired when the email is done being sent.  This\n                should take a single parameter, `err`, that will be set to\n                the status code of the API HTTP response code  if the email\n                failed to send; on success, `err` will be `undefined`.\n\n**Note:** Sending a message via raw MIME lets you use Mailgun's built-in\n          templating shinies.  Check out the [Mailgun Docs](http://documentation.mailgun.net/Documentation/DetailedDocsAndAPIReference#Message_Templates)\n          for details.\n\n#### Example\n\n    sendRaw('sender@example.com',\n            ['recipient1@example.com', 'http://example.com/recipient2'],\n            'From: sender@example.com' +\n              '\\nTo: ' + 'recipient1@example.com, http://example.com/recipient2' +\n              '\\nContent-Type: text/html; charset=utf-8' +\n              '\\nSubject: I Love Email' +\n              '\\n\\nBecause it's just so awesome',\n            function(err) { err && console.log(err) });\n\n### Email Addresses\n\nMailgun allows sender and recipient email addresses to be formatted in\nseveral different ways:\n\n * `'John Doe' <john@example.com>`\n * `\"John Doe\" <john@example.com>`\n * `John Doe <john@example.com>`\n * `<john@example.com>`\n * `john@example.com`\n\n### Mailgun Headers\n\nMailgun understands a couple special headers, specified via `options` when using\n`sendText`, or in the MIME headers when using `sendRaw`.  These are defined\nbelow.\n\n * `X-Mailgun-Tag` - Used to tag sent emails (defined in `Mailgun.MAILGUN_TAG`)\n * `X-Campaign-Id` - Used for tracking campaign data (defined in `Mailgun.CAMPAIGN_ID`)\n\n### Example\n\nHere's a complete sending example.\n\n    var mailgun = require('mailgun');\n\n    var mg = new Mailgun('some-api-key');\n    mg.sendText('example@example.com', ['Recipient 1 <rec1@example.com>', 'rec2@example.com'],\n      'This is the subject',\n      'This is the text',\n      'noreply@example.com', {},\n      function(err) {\n        if (err) console.log('Oh noes: ' + err);\n        else     console.log('Success');\n    });\n\n## Routing\n\nMailgun lets you route incoming email to different destinations.  TODO - more docs\n\n### createRoute\n\nCreates a new route.  TODO - more docs\n\n`createRoute(pattern, destination, [callback(err, id)])`\n\nTODO - document arguments\n\n### deleteRoute\n\nDeletes the route with the specified ID if it exists, otherwise fails silently.\n\n`deleteRoute(id, [callback(err)])`\n\n * id - Route ID, as returned by `getRoutes()` or `createRoute`.\n * Callback to be fired when the deletion is completed.  This callback\n   takes a single argument, `err`, that will be set to an Error object\n   if something went wrong with the deletion.  If the deletion succeeded, or\n   no route existed with the specified ID, `err` will be `undefined`.\n\n### getRoutes\n\nGets a list of all routes.\n\n`getRoutes(callback(err, routes))`\n\n * `callback` - Callback to be fired when the request has finished.  This\n                should take two parameters: `err`, which will hold either an\n                HTTP error code, or an error string on failure; and `routes`,\n                which will be a list of routes on success.  Routes returned\n                through this callback will be objects with three fields: `pattern`,\n                `destination`, and `id`.\n\n#### Example\n\n    getRoutes(function(err, routes) {\n\n      if (err) console.log('Error:', err);\n\n      for (var i=0; i<routes.length; i++) {\n        console.log('Route');\n        console.log('  Pattern:', routes[i].pattern);\n        console.log('  Destination:', routes[i].destination);\n        console.log('  Id:', routes[i].id);\n      }\n    });\n\n## Eventual Work:\n\n * Mailboxes\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/shz/node-mailgun/issues"
  },
  "_id": "mailgun@0.4.2",
  "_from": "mailgun@~0.4.2"
}
